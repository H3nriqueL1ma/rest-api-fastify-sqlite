{"mappings":"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","sources":["scripts/main.js","scripts/routes/users.js"],"sourcesContent":["import { create_, read_, update_, delete_ } from './routes/users.js'\r\n\r\nconst backendURL = \"https://rest-api-fastify-sqlite.onrender.com\"\r\n\r\nconst $button = document.querySelector(\"#button\");\r\nconst $table = document.querySelector(\"table\");\r\nconst $input_name = document.querySelector(\"input#name\");\r\nconst $input_profession = document.querySelector(\"input#profession\");\r\nconst $input_birth = document.querySelector(\"input#birth\");\r\n\r\n$input_name.setAttribute(\"autocomplete\", \"off\");\r\n$input_profession.setAttribute(\"autocomplete\", \"off\");\r\n$input_birth.setAttribute(\"autocomplete\", \"off\");\r\n\r\nwindow.addEventListener(\"load\", async () => {\r\n\tawait loadUsers();\r\n})\r\n\r\n$button.addEventListener(\"click\", async (event) => {\r\n\tevent.preventDefault();\r\n\r\n\tif (!isNaN(Number($input_name.value)) || !isNaN(Number($input_profession.value))) {\r\n\t\talert(\"[ERROR]: Não é possível colocar números no campo de Nome e Profissão!\");\r\n\t} else {\r\n\t\tconst user_name = $input_name ? $input_name.value.toString() : \"\";\r\n\t\tconst user_profession = $input_profession ? $input_profession.value.toString() : \"\";\r\n\t\tconst user_birthdate = $input_birth ? $input_birth.value.toString() : \"\";\r\n\t\r\n\t\tconst data = [\r\n\t\t\tuser_name,\r\n\t\t\tuser_profession,\r\n\t\t\tuser_birthdate\r\n\t\t];\r\n\t\r\n\t\tawait create_(data, backendURL);\r\n\t\r\n\t\tawait loadUsers();\r\n\t}\r\n});\r\n\r\nasync function loadUsers() {\r\n\t$table.innerHTML = '';\r\n\r\n\tconst users = await read_(null, backendURL);\r\n\r\n\tusers.forEach((user) => {\r\n\t\tconst newRow = document.createElement(\"tr\");\r\n\t\tnewRow.innerHTML = `\r\n\t\t\t<td>${user.id}</td>\r\n\t\t\t<td>${user.name}</td>\r\n\t\t\t<td>${user.profession}</td>\r\n\t\t\t<td>${user.birthdate}</td>\r\n\t\t\t<td>\r\n\t\t\t\t<button class=\"update\">Editar</button>\r\n\t\t\t\t<button class=\"delete\">Excluir</button>\r\n\t\t\t</td>\r\n\t\t`;\r\n\r\n\t\t$table.appendChild(newRow);\r\n\r\n\t\tconst $button_update = newRow.querySelector(\".update\");\r\n\t\tconst $button_delete = newRow.querySelector(\".delete\");\r\n\r\n\t\t$button_update.addEventListener(\"click\", () => {\r\n\t\t\talert(\"Todas as edições são opcionais, ou seja, não é preciso completar todos os campos para atualizar, basta deixar em branco.\");\r\n\t\t\tconst name_updated = prompt(\"Novo Nome:\");\r\n\t\t\tconst profession_updated = prompt(\"Nova Profissão:\");\r\n\t\t\tconst birth_updated = prompt(\"Nova Data de Nascimento (Ex.: 2001-07-04):\");\r\n\t\t  \r\n\t\t\tconst regex = /^\\d{4}-\\d{2}-\\d{2}$/;\r\n\t\t  \r\n\t\t\tif (hasNumbers(name_updated) || hasNumbers(profession_updated)) {\r\n\t\t\t\t  alert(\"[ERROR]: Não é possível colocar números no campo de Nome e Profissão!\");\r\n\t\t\t} else if (birth_updated !== null && birth_updated !== \"\" && !regex.test(birth_updated)) {\r\n\t\t\t\t  alert(\"[ERROR]: Formato de data de nascimento inválido!\");\r\n\t\t\t} else {\r\n\t\t\t\t  const updatedData = [\r\n\t\t\t\t\tname_updated !== null && name_updated !== \"\" ? name_updated : user.name,\r\n\t\t\t\t\tprofession_updated !== null && profession_updated !== \"\" ? profession_updated : user.profession,\r\n\t\t\t\t\tbirth_updated !== null && birth_updated !== \"\" ? birth_updated : user.birthdate\r\n\t\t\t\t  ];\r\n\t\t  \r\n\t\t\t\tupdate_(updatedData, user.id, backendURL).then((updatedUser) => {\r\n\t\t\t\t\tupdateTableRow(newRow, updatedUser);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t  });\r\n\t\t  \r\n\t\tfunction hasNumbers(string) {\r\n\t\t\treturn /\\d/.test(string);\r\n\t\t}\r\n\r\n\t\t$button_delete.addEventListener(\"click\", async () => {\r\n\t\t\tawait delete_(user.id, backendURL);\r\n\t\t\tnewRow.remove();\r\n\t\t});\r\n\t});\r\n}\r\n\r\nfunction updateTableRow(row, data) {\r\n\tconst [idCell, nameCell, professionCell, birthdateCell] = row.cells;\r\n\r\n\tidCell.textContent = data.id;\r\n\tnameCell.textContent = data.name;\r\n\tprofessionCell.textContent = data.profession;\r\n\tbirthdateCell.textContent = data.birthdate;\r\n}","// Cria um novo usuário no servidor.\r\nexport async function create_(client, url) {\r\n\tconst data_client = client;\r\n\ttry {\r\n\t\t// Envia uma requisição POST para a rota /users do servidor com os dados do cliente.\r\n\t\tconst response = await fetch(url + \"/users\", {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\tname: data_client[0],\r\n\t\t\t\tprofession: data_client[1],\r\n\t\t\t\tbirthdate: data_client[2]\r\n\t\t\t})\r\n\t\t});\r\n\r\n\t\t// Verifica se a resposta da requisição é bem-sucedida.\r\n\t\tif (!response.ok) {\r\n\t\t\tthrow new Error(\"Failed to create a user.\");\r\n\t\t}\r\n\r\n\t\t// Retorna o objeto JSON do usuário criado.\r\n\t\treturn response.json();\r\n\t} catch (error) {\r\n\t\tconsole.log(error);\r\n\t}\r\n}\r\n\r\n// Recupera usuários do servidor com base no nome.\r\nexport async function read_(client, url) {\r\n\ttry {\r\n\t\tconst userName = client;\r\n\r\n\t\t// Envia uma requisição GET para a rota /users do servidor com o parâmetro de consulta ?name.equals=${userName}.\r\n\t\tconst response = await fetch(url + `/users?name.equals=${userName}`);\r\n\r\n\t\t// Converte a resposta em JSON.\r\n\t\tconst users = await response.json();\r\n\r\n\t\t// Retorna o array de objetos JSON dos usuários encontrados.\r\n\t\treturn users;\r\n\t} catch (error) {\r\n\t\tconsole.log(error);\r\n\t\tthrow error;\r\n\t}\r\n}\r\n\r\n// Atualiza um usuário existente no servidor.\r\nexport async function update_(client, id, url) {\r\n\tconst updated_data_client = client;\r\n\tconst userId = parseInt(id);\r\n\r\n\t// Envia uma requisição PUT para a rota /users/${userId} do servidor com os dados atualizados do cliente.\r\n\treturn fetch(url + `/users/${userId}`, {\r\n\t\tmethod: \"PUT\",\r\n\t\theaders: {\r\n\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\tname: updated_data_client[0],\r\n\t\t\tprofession: updated_data_client[1],\r\n\t\t\tbirthdate: updated_data_client[2]\r\n\t\t})\r\n\t}).then(response => response.json());\r\n}\r\n\r\n// Exclui um usuário existente no servidor.\r\nexport async function delete_(id, url) {\r\n\tconst userId = parseInt(id);\r\n\r\n\t// Envia uma requisição DELETE para a rota /users/{userId} do servidor.\r\n\treturn fetch(url + `/users/${userId}`, {\r\n\t\tmethod: \"DELETE\"\r\n\t}).then(response => response.json());\r\n}"],"names":[],"version":3,"file":"bundle.js.map"}
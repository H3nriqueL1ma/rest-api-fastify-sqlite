{"mappings":"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","sources":["src/main.ts","src/routes/users.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { create_, read_, update_, delete_ } from \"./routes/users\";\r\n\r\nconst $button: HTMLButtonElement | null = document.querySelector(\"#button\");\r\nconst $table = document.querySelector(\"table\");\r\nconst $input_name: HTMLInputElement | null = document.querySelector(\"input#name\");\r\nconst $input_profession: HTMLInputElement | null = document.querySelector(\"input#profession\");\r\nconst $input_birth: HTMLInputElement | null = document.querySelector(\"input#birth\");\r\n\r\n$input_name?.setAttribute(\"autocomplete\", \"off\");\r\n$input_profession?.setAttribute(\"autocomplete\", \"off\");\r\n$input_birth?.setAttribute(\"autocomplete\", \"off\");\r\n\r\n$button?.addEventListener(\"click\", async (event) => {\r\n\tevent.preventDefault();\r\n\r\n\tconst user_name = $input_name ? $input_name.value.toString() : \"\";\r\n\tconst user_profession = $input_profession ? $input_profession.value.toString() : \"\";\r\n\tconst user_birthdate = $input_birth ? $input_birth.value.toString() : \"\";\r\n\r\n\tconst data: string[] = [\r\n\t\tuser_name,\r\n\t\tuser_profession,\r\n\t\tuser_birthdate\r\n\t];\r\n\r\n\tawait create_(data, \"http://localhost:3333\");\r\n\r\n\tconst users = await read_(data[0], \"http://localhost:3333\");\r\n\r\n\tusers.forEach((user: { id: string; name: string; profession: string; birthdate: string; }) => {\r\n\t\tconst newRow = document.createElement(\"tr\");\r\n\t\tnewRow.innerHTML = `\r\n            <td>${user.id}</td>\r\n            <td>${user.name}</td>\r\n            <td>${user.profession}</td>\r\n            <td>${user.birthdate}</td>\r\n            <td>\r\n                <button class=\"update\">Editar</button>\r\n                <button class=\"delete\">Excluir</button>\r\n            </td>\r\n        `;\r\n\r\n\t\t$table?.appendChild(newRow);\r\n\r\n\t\tconst $button_update: HTMLButtonElement | null = newRow.querySelector(\".update\");\r\n\t\tconst $button_delete: HTMLButtonElement | null = newRow.querySelector(\".delete\");\r\n\r\n\t\t$button_update?.addEventListener(\"click\", () => {\r\n\t\t\talert(\"Todas as edições são opcionais, ou seja, não é preciso completar todos os campos para atualizar, basta deixar em branco.\");\r\n\t\t\tconst name_updated = prompt(\"Novo Nome:\");\r\n\t\t\tconst profession_updated = prompt(\"Nova Profissão:\");\r\n\t\t\tconst birth_updated = prompt(\"Nova Data de Nascimento:\");\r\n    \r\n\t\t\tconst updatedData = [\r\n\t\t\t\tname_updated !== null && name_updated !== \"\" ? name_updated : user.name,\r\n\t\t\t\tprofession_updated !== null && profession_updated !== \"\" ? profession_updated : user.profession,\r\n\t\t\t\tbirth_updated !== null && birth_updated !== \"\" ? birth_updated : user.birthdate\r\n\t\t\t];\r\n\r\n\t\t\tupdate_(updatedData, user.id, \"http://localhost:3333\").then((updatedUser: any) => {\r\n\t\t\t\tupdateTableRow(newRow, updatedUser);\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\t$button_delete?.addEventListener(\"click\", async () => {\r\n\t\t\tawait delete_(user.id, \"http://localhost:3333\");\r\n\t\t\tnewRow.remove();\r\n\t\t});\r\n\t});\r\n});\r\n\r\nfunction updateTableRow(row: HTMLTableRowElement, data: any) {\r\n\tconst [idCell, nameCell, professionCell, birthdateCell] = row.cells;\r\n\r\n\tidCell.textContent = data.id;\r\n\tnameCell.textContent = data.name;\r\n\tprofessionCell.textContent = data.profession;\r\n\tbirthdateCell.textContent = data.birthdate;\r\n}","// Cria um novo usuário no servidor.\r\nexport async function create_(client: string[], url: string) {\r\n\tconst data_client: string[] = client;\r\n\ttry {\r\n\t\t// Envia uma requisição POST para a rota /users do servidor com os dados do cliente.\r\n\t\tconst response = await fetch(url + \"/users\", {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\tname: data_client[0],\r\n\t\t\t\tprofession: data_client[1],\r\n\t\t\t\tbirthdate: data_client[2]\r\n\t\t\t})\r\n\t\t});\r\n\r\n\t\t// Verifica se a resposta da requisição é bem-sucedida.\r\n\t\tif (!response.ok) {\r\n\t\t\tthrow new Error(\"Failed to create a user.\");\r\n\t\t}\r\n\r\n\t\t// Retorna o objeto JSON do usuário criado.\r\n\t\treturn response.json();\r\n\t} catch (error) {\r\n\t\tconsole.log(error);\r\n\t}\r\n}\r\n\r\n// Recupera usuários do servidor com base no nome.\r\nexport async function read_(client: string, url: string) {\r\n\ttry {\r\n\t\tconst userName = client;\r\n\r\n\t\t// Envia uma requisição GET para a rota /users do servidor com o parâmetro de consulta ?name.equals=${userName}.\r\n\t\tconst response = await fetch(url + `/users?name.equals=${userName}`);\r\n\r\n\t\t// Converte a resposta em JSON.\r\n\t\tconst users = await response.json();\r\n\r\n\t\t// Retorna o array de objetos JSON dos usuários encontrados.\r\n\t\treturn users;\r\n\t} catch (error) {\r\n\t\tconsole.log(error);\r\n\t\tthrow error;\r\n\t}\r\n}\r\n\r\n// Atualiza um usuário existente no servidor.\r\nexport async function update_(client: string[], id: string, url: string) {\r\n\tconst updated_data_client: string[] = client;\r\n\tconst userId = parseInt(id);\r\n\r\n\t// Envia uma requisição PUT para a rota /users/${userId} do servidor com os dados atualizados do cliente.\r\n\treturn fetch(url + `/users/${userId}`, {\r\n\t\tmethod: \"PUT\",\r\n\t\theaders: {\r\n\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\tname: updated_data_client[0],\r\n\t\t\tprofession: updated_data_client[1],\r\n\t\t\tbirthdate: updated_data_client[2]\r\n\t\t})\r\n\t}).then(response => response.json());\r\n}\r\n\r\n// Exclui um usuário existente no servidor.\r\nexport async function delete_(id: string, url: string) {\r\n\tconst userId = parseInt(id);\r\n\r\n\t// Envia uma requisição DELETE para a rota /users/{userId} do servidor.\r\n\treturn fetch(url + `/users/${userId}`, {\r\n\t\tmethod: \"DELETE\"\r\n\t}).then(response => response.json());\r\n}"],"names":[],"version":3,"file":"bundle.js.map"}